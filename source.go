// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/hookdeck/hookdeck-go-sdk/core"
	time "time"
)

type SourceCreateRequest struct {
	// A unique name for the source
	Name string `json:"name" url:"-"`
	// Description for the source
	Description        *core.Optional[string]                  `json:"description,omitempty" url:"-"`
	AllowedHttpMethods *core.Optional[SourceAllowedHttpMethod] `json:"allowed_http_methods,omitempty" url:"-"`
	CustomResponse     *core.Optional[SourceCustomResponse]    `json:"custom_response,omitempty" url:"-"`
	Verification       *core.Optional[VerificationConfig]      `json:"verification,omitempty" url:"-"`
}

type SourceListRequest struct {
	Id         []*string                 `json:"-" url:"id,omitempty"`
	Name       *string                   `json:"-" url:"name,omitempty"`
	Disabled   *bool                     `json:"-" url:"disabled,omitempty"`
	DisabledAt *time.Time                `json:"-" url:"disabled_at,omitempty"`
	OrderBy    *SourceListRequestOrderBy `json:"-" url:"order_by,omitempty"`
	Dir        *SourceListRequestDir     `json:"-" url:"dir,omitempty"`
	Limit      *int                      `json:"-" url:"limit,omitempty"`
	Next       *string                   `json:"-" url:"next,omitempty"`
	Prev       *string                   `json:"-" url:"prev,omitempty"`
}

type SourceRetrieveRequest struct {
	Include *string `json:"-" url:"include,omitempty"`
}

type SourceDeleteResponse struct {
	// ID of the source
	Id string `json:"id" url:"id"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SourceDeleteResponse) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceDeleteResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceDeleteResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceDeleteResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceDeleteResponse) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceListRequestDir string

const (
	SourceListRequestDirAsc  SourceListRequestDir = "asc"
	SourceListRequestDirDesc SourceListRequestDir = "desc"
)

func NewSourceListRequestDirFromString(s string) (SourceListRequestDir, error) {
	switch s {
	case "asc":
		return SourceListRequestDirAsc, nil
	case "desc":
		return SourceListRequestDirDesc, nil
	}
	var t SourceListRequestDir
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SourceListRequestDir) Ptr() *SourceListRequestDir {
	return &s
}

type SourceListRequestOrderBy string

const (
	SourceListRequestOrderByCreatedAt SourceListRequestOrderBy = "created_at"
)

func NewSourceListRequestOrderByFromString(s string) (SourceListRequestOrderBy, error) {
	switch s {
	case "created_at":
		return SourceListRequestOrderByCreatedAt, nil
	}
	var t SourceListRequestOrderBy
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SourceListRequestOrderBy) Ptr() *SourceListRequestOrderBy {
	return &s
}

type SourceUpdateRequest struct {
	// A unique name for the source
	Name *core.Optional[string] `json:"name,omitempty" url:"-"`
	// Description for the source
	Description        *core.Optional[string]                  `json:"description,omitempty" url:"-"`
	AllowedHttpMethods *core.Optional[SourceAllowedHttpMethod] `json:"allowed_http_methods,omitempty" url:"-"`
	CustomResponse     *core.Optional[SourceCustomResponse]    `json:"custom_response,omitempty" url:"-"`
	Verification       *core.Optional[VerificationConfig]      `json:"verification,omitempty" url:"-"`
}

type SourceUpsertRequest struct {
	// A unique name for the source
	Name string `json:"name" url:"-"`
	// Description for the source
	Description        *core.Optional[string]                  `json:"description,omitempty" url:"-"`
	AllowedHttpMethods *core.Optional[SourceAllowedHttpMethod] `json:"allowed_http_methods,omitempty" url:"-"`
	CustomResponse     *core.Optional[SourceCustomResponse]    `json:"custom_response,omitempty" url:"-"`
	Verification       *core.Optional[VerificationConfig]      `json:"verification,omitempty" url:"-"`
}
